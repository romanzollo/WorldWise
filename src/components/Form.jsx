import { useEffect, useState } from 'react';
import DatePicker from 'react-datepicker';

import { useUrlPosition } from '../hooks/useUrlPosition';
import { useCities } from '../hooks/useCities';
import { useNavigate } from 'react-router-dom';
import Button from './Button';
import BackButton from './BackButton';
import Message from './Message';
import Spinner from './Spinner';

import 'react-datepicker/dist/react-datepicker.css';
import styles from './Form.module.css';

// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ –µ–º–æ–¥–∑–∏
export function convertToEmoji(countryCode) {
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map((char) => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
}

const BASE_URL = 'https://api.bigdatacloud.net/data/reverse-geocode-client';

function Form() {
    // –¥–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º —Ö—É–∫ useUrlPosition
    const [lat, lng] = useUrlPosition();
    // –¥–æ—Å—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ CitiesContext –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const { createCity, isLoading } = useCities();
    // –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    const navigate = useNavigate();

    const [isLoadingGeocoding, setIsLoadingGeocoding] = useState(false);
    const [cityName, setCityName] = useState(''); // –≥–æ—Ä–æ–¥
    const [country, setCountry] = useState(''); // —Å—Ç—Ä–∞–Ω–∞
    const [emoji, setEmoji] = useState('');
    const [date, setDate] = useState(new Date());
    const [notes, setNotes] = useState('');
    const [geocodingError, setGeocodingError] = useState('');

    useEffect(() => {
        // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (!lat && !lng) return;

        async function fetchCityData() {
            try {
                setIsLoadingGeocoding(true);
                setGeocodingError(''); // –æ—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É

                const res = await fetch(
                    `${BASE_URL}?latitude=${lat}&longitude=${lng}`
                );
                const data = await res.json();

                // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if (!data.countryCode)
                    throw new Error(
                        "That doesn't seem to be a city. Click somewhere else and try again üòâ"
                    );

                setCityName(data.city || data.locality || '');
                setCountry(data.countryName || '');
                setEmoji(convertToEmoji(data.countryCode));
            } catch (error) {
                // –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–µ–∏ÃÜ—Ç
                setGeocodingError(error.message);
            } finally {
                setIsLoadingGeocoding(false);
            }
        }

        fetchCityData();
    }, [lat, lng]);

    // –¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    // —á—Ç–æ–±—ã navigate —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    async function handleSubmit(e) {
        e.preventDefault();

        if (!cityName || !date) return;

        // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        const newCity = {
            cityName,
            country,
            emoji,
            date,
            notes,
            position: { lat, lng },
        };

        // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
        await createCity(newCity);
        navigate('/app/cities');
    }

    // –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Spinner
    if (isLoadingGeocoding) return <Spinner />;

    // –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Message
    if (!lat && !lng) return <Message message="Click somewhere on the map" />;

    // –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–µ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Message
    if (geocodingError) return <Message message={geocodingError} />;

    return (
        <form
            className={`${styles.form} ${isLoading ? styles.loading : ''}`}
            onSubmit={handleSubmit}
        >
            <div className={styles.row}>
                <label htmlFor="cityName">City name</label>
                <input
                    id="cityName"
                    onChange={(e) => setCityName(e.target.value)}
                    value={cityName}
                />
                <span className={styles.flag}>{emoji}</span>
            </div>

            <div className={styles.row}>
                <label htmlFor="date">When did you go to {cityName}?</label>

                {/* –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç DatePicker
                –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã */}
                <DatePicker
                    id="date"
                    selected={date}
                    onChange={(data) => setDate(data)}
                    dateFormat="dd.MM.yyyy"
                />
            </div>

            <div className={styles.row}>
                <label htmlFor="notes">
                    Notes about your trip to {cityName}
                </label>
                <textarea
                    id="notes"
                    onChange={(e) => setNotes(e.target.value)}
                    value={notes}
                />
            </div>

            <div className={styles.buttons}>
                <Button type="primary">Add</Button>
                <BackButton />
            </div>
        </form>
    );
}

export default Form;
